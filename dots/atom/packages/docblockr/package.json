{
  "name": "docblockr",
  "main": "./lib/docblockr",
  "version": "0.3.0",
  "description": "A helper package for writing documentation",
  "repository": {
    "type": "git",
    "url": "https://github.com/nikhilkalige/docblockr"
  },
  "license": "MIT",
  "engines": {
    "atom": ">0.50.0"
  },
  "dependencies": {},
  "readme": "# Docblockr Package\n\nDocBlockr is a package for [Atom][atom] which is designed to make writing documentation faster and easier.\n\nThe package currently supprts the following languages -\n\n*  JavaScript\n\n## Installing\n\nUse the Atom package manager, which can be found in the Settings view or\nrun `apm install docblockr` from the command line.\n\n## Feature requests & bug reports\n\nThe main development branch is `develop` and the stable 'production' branch is `master`. Please remember to base your branch from `develop` and issue the pull request back to that branch.\n\n## Usage\n\n> Below are some examples of what the package does. Note that there are no keyboard shortcuts required to trigger these completions - just type as normal and it happens for you!\n\n### Docblock completion\n\nPressing **enter** or **tab** after `/**` (or `###*` for Coffee-Script) will yield a new line and will close the comment.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/basic.gif)\n\n### Function documentation\n\nHowever, if the line directly afterwards contains a function definition, then its name and parameters are parsed and some documentation is automatically added.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/function-template.gif)\n\nYou can then press `tab` to move between the different fields.\n\nIf you have many arguments, or long variable names, it might be useful to spread your arguments across multiple lines. DocBlockr will handle this situation too:\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/long-args.gif)\n\nDocBlockr will try to make an intelligent guess about the return value of the function.\n\n- If the function name is or begins with \"set\" or \"add\", then no `@return` is inserted.\n- If the function name is or begins with \"is\" or \"has\", then it is assumed to return a `Boolean`.\n- In Javascript, if the function begins with an uppercase letter then it is assumed that the function is a class definition. No `@return` tag is added.\n\n### Variable documentation\n\nIf the line following your docblockr contains a variable declaration, DocBlockr will try to determine the data type of the variable and insert that into the comment.\n\nIf you press `shift+enter` after the opening `/**` then the docblockr will be inserted inline.\n\n![](https://raw.githubusercontent.com/NikhilKalige/docblockr/master/resources/vars.gif)\n\nDocBlockr will also try to determine the type of the variable from its name. Variables starting with `is` or `has` are assumed to be booleans, and `callback`, `cb`, `done`, `fn`, and `next` are assumed to be functions. If you use your own variable naming system (eg: hungarian notation: booleans all start with `b`, arrays start with `arr`), you can define these rules yourself. \n\n### Note\nAll credits for this package goes to [SublimeJsdocs][jsdocs] who have created a wonderful plugin for Sublime Text. I have just ported the package to Atom and Javascript.\n\nAlso please note that all features have not yet been implemented. This is a work in progess.\n\n[atom]: http://atom.io/\n[jsdocs]: https://github.com/spadgos/sublime-jsdocs",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nikhilkalige/docblockr/issues"
  },
  "homepage": "https://github.com/nikhilkalige/docblockr",
  "_id": "docblockr@0.3.0",
  "dist": {
    "shasum": "d3b8aa3fe8acd6739acb542b2ead7d11caf0f079"
  },
  "_resolved": "/var/folders/rg/gvn68yfd251cv6pyx0_plbgh0000gn/T/d-114329-96688-2j9oyv/package.tgz",
  "_from": "/var/folders/rg/gvn68yfd251cv6pyx0_plbgh0000gn/T/d-114329-96688-2j9oyv/package.tgz"
}
